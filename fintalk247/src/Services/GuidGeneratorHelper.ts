export default class GuidGeneratorHelper {
    public GUIDVERSIONONETITLE = "Version 1: date-time & MAC address";
    public GUIDVERSIONTHREETITLE = "Version 3: MD5 hash & namespace";
    public GUIDVERSIONFOURTITLE = "Version 4: random";
    public GUIDVERSIONFIVETITLE = "Version 5: SHA-1 hash & namespace";
    public GUIDVERSIONONEDESCRIPTION = "This version is generated using both the current time and client MAC address. This means that if you have a version 1 GUID you can figure out when it was created by inspecting the timestamp value.";
    public GUIDVERSIONTHREEDESCRIPTION = "This GUID is generated by taking a namespace (e.g. a fully qualified domain name) and a given name name, convertying to bytes, concatenating, and hashing. Once specifying the special bits like version and variant the resulting bytes are then converted into its hexadecimal form. The special property about this version is that GUIDs generated from the same name in the same namepsace will be identical even if generated at different times.";
    public GUIDVERSIONFOURDESCRIPTION = "This type of GUID is created using random numbers - of the 128 bits in a GUID, 6 are reserved for special use (version + variant bits) giving us 122 bits that can be filled at random. The specification doesn't specify how the random numbers should be generated, they could be anything where from psuedo-random to cryptographically secure - hence these GUIDs like all other GUIDs should only be used for identification and not for security.";
    public GUIDVERSIONFIVEDESCRIPTION = "This version is identical to version 3 except that SHA-1 is used in the hashing step in place of MD5.";



    getGUIDInfoByVersion(versionNumber: number) {
        let _guidInfo = [];
        switch (versionNumber) {
            case 1:
                _guidInfo.push(this.GUIDVERSIONONETITLE);
                _guidInfo.push(this.GUIDVERSIONONEDESCRIPTION);
                break;
            case 3:
                _guidInfo.push(this.GUIDVERSIONTHREETITLE);
                _guidInfo.push(this.GUIDVERSIONTHREEDESCRIPTION);
                break;
            case 4:
                _guidInfo.push(this.GUIDVERSIONFOURTITLE);
                _guidInfo.push(this.GUIDVERSIONFOURDESCRIPTION);
                break;
            case 5:
                _guidInfo.push(this.GUIDVERSIONFIVETITLE);
                _guidInfo.push(this.GUIDVERSIONFIVEDESCRIPTION);
                break;
            default:
                break;
        }
        return _guidInfo;
    }

    getGUIDByVersion(versionNumber: number, _dnsNamespace: string) {
        let _guidNumber = "";
        switch (versionNumber) {
            case 1:
                _guidNumber = this.getVersionOneUUID();
                break;
            case 3:
                _guidNumber = this.getVersionThreeUUID(_dnsNamespace);
                break;
            case 4:
                _guidNumber = this.getVersionFourUUID();
                break;
            case 5:
                _guidNumber = this.getVersionFiveUUID(_dnsNamespace);
                break;
            default:
                break;
        }
        return _guidNumber;
    }

    getLocalUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    getVersionOneUUID() {
        const uuidv1 = require('uuid/v1');
        return uuidv1(); // ⇨ '2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d'
    }

    getVersionThreeUUID(_dnsNamespace: string) {
        const uuidv3 = require('uuid/v3');

        // ... using predefined DNS namespace (for domain names)
        uuidv3('hello.example.com', uuidv3.DNS); // ⇨ '9125a8dc-52ee-365b-a5aa-81b0b3681cf6'

        // ... using predefined URL namespace (for, well, URLs)
        uuidv3('http://example.com/hello', uuidv3.URL); // ⇨ 'c6235813-3ba4-3801-ae84-e0a6ebb7d138'

        // ... using a custom namespace
        //
        // Note: Custom namespaces should be a UUID string specific to your application!
        // E.g. the one here was generated using this modules `uuid` CLI.
        const MY_NAMESPACE = '9a31aec1-0063-46f3-b8c9-d083accd4cba';
        return uuidv3(_dnsNamespace, MY_NAMESPACE); // ⇨ 'e8b5a51d-11c8-3310-a6ab-367563f20686'
    }

    getVersionFourUUID() {
        const uuidv4 = require('uuid/v4');
        return uuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'
    }

    getVersionFiveUUID(_dnsNamespace: string) {
        const uuidv5 = require('uuid/v5');

        // ... using predefined DNS namespace (for domain names)
        uuidv5('hello.example.com', uuidv5.DNS); // ⇨ 'fdda765f-fc57-5604-a269-52a7df8164ec'

        // ... using predefined URL namespace (for, well, URLs)
        uuidv5('http://example.com/hello', uuidv5.URL); // ⇨ '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'

        // ... using a custom namespace
        //
        // Note: Custom namespaces should be a UUID string specific to your application!
        // E.g. the one here was generated using this modules `uuid` CLI.
        const MY_NAMESPACE = '897fb447-9b54-4eca-a39c-c6ad50cd748b';
        return uuidv5(_dnsNamespace, MY_NAMESPACE); // ⇨ '630eb68f-e0fa-5ecc-887a-7c7a62614681'
    }

    updateReview(userMessage: string) {
        //var fs = require('fs');
        //var fs = require('browserify-fs');
        // var createCsvWriter = require(csvWrite).createObjectCsvWriter;
        // console.log(createCsvWriter);
        // const csvWriter = createCsvWriter({
        //     header: ['DATE', 'ACTION', 'Feedback'],
        //     path: '/review.csv',
        //     append: true
        // });
        // csvWriter.writeRecords(userMessage.split(','))       // returns a promise
        //     .then(() => {
        //         console.log('...Done');
        //     });
    }

    generatePassword(PassworLength: number, IncludeNumber: boolean, IncludeSymbol: boolean, IncludeUpperCase: boolean, ExcludeSimilarChar: boolean,
        ExcludeWords: boolean, IsStrictPassword: boolean) {
        let PasswordString: "";

        var generator = require('generate-password');
        PasswordString = generator.generate({
            length: PassworLength,
            numbers: IncludeNumber,
            symbols: IncludeSymbol,
            uppercase: IncludeUpperCase,
            excludeSimilarCharacters: ExcludeSimilarChar,
            exclude: ExcludeWords,
            strict: IsStrictPassword
        });

        return PasswordString;
    }
}